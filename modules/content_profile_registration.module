  <?php // $Id$
/**
 * @file
 * Allows exposure and processing of content_profile node fields at user registration
 */

function content_profile_registration_form_alter(&$form, $form_state, $form_id) {
  module_load_include('inc', 'content', 'includes/content.node_form');
  if ($form_id == 'user_register' && module_exists('content')) {
    $widget_types = _content_widget_types();
    
    foreach (content_profile_get_types('names') as $type => $typename) {
      $use = variable_get('content_profile_registration_use'. $type, TRUE);
      if ($use) {
        $display = variable_get('content_profile_registration_display_'. $type, FALSE);
        if ($display === FALSE) {
          $display = _content_profile_registration_get_field_select($type, TRUE);
          $display = array_keys($display);
        }
        if (!empty($display) || $display ) {
          $elements = array();

          $node = new stdClass();
          $node->type = $type;

          $fields = _content_profile_registration_get_fields($type);

          foreach ($fields as $field_name => $field) {
            if (in_array($field_name, $display)) {
              $cck_field = content_field_form($form, $form_state, $field);
              $elements = array_merge($elements, $cck_field);
            }
          }

          if (!isset($form['content_profile_registration_'. $type])) {
            $form['content_profile_registration_'. $type] = array(
              '#type' => 'fieldset',
              '#title' => $typename
            );
            $form['content_profile_registration_'. $type] = array_merge($form['content_profile_registration_' .$type], $elements);
          }
        }
      }
    }
  
    $form['#submit'][] = 'content_profile_registration_user_register_submit';
    $form['#validate'][] = 'content_profile_registration_user_register_validate';
  }
  elseif ($form_id == 'content_profile_admin_settings') {
    $type = $form_state['type'];
    $options = _content_profile_registration_get_field_select($type);
    if (!empty($options)) {
      $form['registration'] = array(
        '#type' => 'fieldset',
        '#title' => t('User Registration'),
        '#description' => t('Customize how this content profile shows up on the user registration page.'),
        '#collapsible' => TRUE,
      );
      $form['registration']['content_profile_registration_use_'. $type] = array(
        '#type' => 'checkbox',
        '#title' => t('Use on Registration'),
        '#description' => t('Use this content type on the user registration page'),
        '#default_value' => variable_get('content_profile_registration_use_'. $type, TRUE),
      );
    
      $fields = variable_get('content_profile_registration_display_'. $type, FALSE);
      if ($fields === FALSE) {
        // user hasn't set any fields let's default to all required fields
        $fields = _content_profile_registration_get_field_select($type, TRUE);
        $fields = array_keys($fields);
      }

      $form['registration']['content_profile_registration_display_'.$type] = array(
        '#type' => 'select',
        '#multiple' => TRUE,
        '#title' => t('Show following fields on user registration'),
        '#description' => t('Fields selected here will show up on the user registration form. Required fields will always show up.'),
        '#options' => $options,
        '#default_value' => $fields,
      );
    }
    $form['#submit'][] = 'content_profile_registration_admin_settings_submit';
    
  }
}

function _content_profile_registration_get_fields($type) {
   $typeinfo = content_types($type);
   return $typeinfo['fields'];
}

/*
 returns an array suitable for use in a select field
 if $required is true only required fields fields will be returned if $required is FALSE all fields will be returned
*/
function _content_profile_registration_get_field_select($type, $required=FALSE) {
  $fields = _content_profile_registration_get_fields($type);
  $return = array();
  foreach($fields as $fieldname => $info) {
    if ($info['required'] && $required) {
      $return[$fieldname] = $info['widget']['label'];
    }
    elseif (!$required) {
      $return[$fieldname] = $info['widget']['label'];
    }
  }
  return $return;
}

function _content_profile_registration_required_fields() {
  foreach (content_profile_get_types('names') as $type => $typename) {
    $fields = _content_profile_registration_get_fields($type);
    foreach ($fields as $field_name => $field) {
      if ($field['required']) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

function content_profile_registration_admin_settings_submit($form, $form_state) {
  foreach($form_state['values'] as $key => $value) {
    if (strpos($key, 'content_profile_registration_') !== FALSE) {
      variable_set($key, $value);
    }
  }
}

function content_profile_registration_user_register_submit($form, $form_state) {
  require_once drupal_get_path('module', 'node') .'/node.pages.inc';
  foreach (content_profile_get_types('names') as $type => $typename) {
    $node = new StdClass;
    $node->type = $type;
    $node->uid = $form_state['user']->uid;
    $node->title = $form_state['values']['name'];
    $node->name = $form_state['values']['name'];
    
    // review the CCK API to see if there is a builtin for this foreach() functionality
    foreach ($form_state['values'] as $field_name => $value) {
      if (preg_match('/^field_/', $field_name)) {
        $node->$field_name = $form_state['values'][$field_name];
      }
    }
    // Create the node.
    $node = node_submit($node);
    module_invoke_all('submit', $node);
    module_invoke_all('nodeapi', $node, 'submit', NULL, NULL);
    node_save($node);
    // Give us a nice log message.
    if ($node->nid) {
      watchdog('content', t('Content Profile: added %user %type upon registration.', array('%user' => $node->name, '%type' => $type)), WATCHDOG_NOTICE, l(t('view'), "node/$node->nid"));
    }
  }
}

function content_profile_registration_user_register_validate($form_id, $form_values) {
  // Create a dummy node to pass along to CCK.
  $node = new stdClass();
  foreach ($form_values as $field_name => $value) {
    if (preg_match('/^field_/', $field_name)) {
      $node->$field_name = $form_values[$field_name];
    }
  }
  
  // is proper node->type setting necessary for content_validate() to function properly?
  foreach (content_profile_get_types('names') as $type => $typename) {
    $node->type = $type;
    content_validate($node);  
  }
}
