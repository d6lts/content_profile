<?php
// $Id$

/**
 * @file
 * Allows exposure and processing of content_profile node fields at user registration
 */

/**
 * Implementation of hook_form_alter().
 */
function content_profile_registration_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_register' && module_exists('content')) {
    module_load_include('inc', 'content', 'includes/content.node_form');
    $profile_types = content_profile_get_types('names', 'registration_use');

    foreach ($profile_types as $type => $typename) {
      $display_fields = _content_profile_registration_get_field_select($type, TRUE);
      $display_fields += content_profile_get_settings($type, 'registration_display');

      if (!empty($display_fields)) {
        $form_state['content_profile_registration'][$type]['display_fields'] = $display_fields;
        $elements = array();
        $fields = _content_profile_registration_get_fields($type);

        foreach (array_intersect(array_keys($fields), array_keys($display_fields)) as $field_name) {
          $cck_field = content_field_form($form, $form_state, $fields[$field_name]);
          $elements = array_merge($elements, $cck_field);
        }

        $form['content_profile_registration_'. $type] = array(
          '#type' => 'fieldset',
          '#title' => check_plain($typename),
          '#weight' => content_profile_get_settings($type, 'weight'),
        );
        $form['content_profile_registration_'. $type] = $elements;
      }
    }
    if ($profile_types) {
      $form['#submit'][] = 'content_profile_registration_user_register_submit';
      $form['#validate'][] = 'content_profile_registration_user_register_validate';
    }
  }
  elseif ($form_id == 'content_profile_admin_settings') {
    $type = $form_state['type'];
    $form['registration'] = array(
      '#type' => 'fieldset',
      '#title' => t('User Registration'),
      '#description' => t('Customize how this content profile shows up on the user registration page.'),
      '#collapsible' => TRUE,
    );
    $options = _content_profile_registration_get_field_select($type);
    if (!empty($options)) {
      $form['registration']['registration_use'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use on Registration'),
        '#description' => t('Use this content type on the user registration page'),
        '#default_value' => content_profile_get_settings($type, 'registration_use'),
      );
      $form['registration']['registration_display'] = array(
        '#type' => 'select',
        '#multiple' => TRUE,
        '#title' => t('Show this fields beside required fields'),
        '#description' => t('Fields selected here will show up on the user registration form. Required fields will always show up.'),
        '#options' => _content_profile_registration_get_field_select($type, FALSE),
        '#default_value' => content_profile_get_settings($type, 'registration_display'),
      );
    }
    else {
      $help = t('There are no fields defined, so registration integration is disabled.');
      $form['registration']['content'] = array('#value' => '<br /><p>'. $help . '</p>');
    }
  }
}

/**
 * Helper function to return all available fields for a particular content type.
 *
 * @param string $type
 *   The content type to return fields for.
 * @return array
 *   Associated fields for the given content type.
 */
function _content_profile_registration_get_fields($type) {
  $typeinfo = content_types($type);
  return $typeinfo['fields'];
}

/**
 * Returns an array of CCK fields of this type suitable for use in a select field
 *
 * @param string $type
 *   A content type to get the select elements for.
 * @param bool $required
 *   If $required is FALSE only not required fields will be returned,
 *   if $required is TRUE only required fields will be returned,
 *   if it's NULL all fields will be returned.
 * @return Array
 *   An array of fields suitable for use in a select field.
*/
function _content_profile_registration_get_field_select($type, $required = NULL) {
  $fields = _content_profile_registration_get_fields($type);
  $return = array();
  foreach ($fields as $fieldname => $info) {
    if ($required || !$info['required']) {
      $return[$fieldname] = $info['widget']['label'];
    }
  }
  return $return;
}

/**
 * Validates the user registration form
 */
function content_profile_registration_user_register_validate($form_id, &$form_state) {
  require_once drupal_get_path('module', 'node') .'/node.pages.inc';
  foreach (content_profile_get_types('names', 'registration_use') as $type => $typename) {
    $node = new StdClass;
    $node->type = $type;
    $node->uid = $form_state['user']->uid;
    $node->title = $form_state['values']['name'];
    $node->name = $form_state['values']['name'];

    foreach ($form_state['content_profile_registration'][$type]['display_fields'] as $field_name => $label) {
      $node->$field_name = $form_state['values'][$field_name];
    }
    content_validate($node);
    $form_state['content_profile_registration'][$type]['node'] =& $node;
  }
}

/**
 * Submits the user registration form
 */
function content_profile_registration_user_register_submit($form, $form_state) {
  foreach (content_profile_get_types('names', 'registration_use') as $type => $typename) {
    $node = &$form_state['content_profile_registration'][$type]['node'];
    // Create the node.
    $node = node_submit($node);
    node_save($node);
    // Give us a nice log message.
    if ($node->nid) {
      watchdog('content', t('Content Profile: added %user %type upon registration.', array('%user' => $node->name, '%type' => $type)), WATCHDOG_NOTICE, l(t('view'), "node/$node->nid"));
    }
  }
}

/**
 * Implementation of hook_content_profile_settings().
 */
function content_profile_registration_content_profile_settings() {
  return array(
    'registration_use' => TRUE,
    'registration_display' => array(),
  );
}
